'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var Settings = /** @class */ (function () {
    function Settings() {
        this.fileDirections = {};
        this.defaultDirection = 'ltr';
        this.rememberPerFile = true;
    }
    Settings.prototype.toJson = function () {
        return JSON.stringify(this);
    };
    Settings.prototype.fromJson = function (content) {
        var obj = JSON.parse(content);
        this.fileDirections = obj['fileDirections'];
        this.defaultDirection = obj['defaultDirection'];
        this.rememberPerFile = obj['rememberPerFile'];
    };
    return Settings;
}());
var RtlPlugin = /** @class */ (function (_super) {
    __extends(RtlPlugin, _super);
    function RtlPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.settings = new Settings();
        _this.SETTINGS_PATH = '.obsidian/rtl.json';
        // This stores the value in CodeMirror's autoCloseBrackets option before overriding it, so it can be restored when
        // we're back to LTR
        _this.autoCloseBracketsValue = false;
        return _this;
    }
    RtlPlugin.prototype.onload = function () {
        var _this = this;
        console.log('loading RTL plugin');
        this.addCommand({
            id: 'switch-text-direction',
            name: 'Switch Text Direction (LTR<>RTL)',
            callback: function () { _this.toggleDocumentDirection(); }
        });
        this.addSettingTab(new RtlSettingsTab(this.app, this));
        this.loadSettings();
        this.registerEvent(this.app.workspace.on('file-open', function (file) {
            if (file && file.path) {
                _this.currentFile = file;
                _this.adjustDirectionToCurrentFile();
            }
        }));
        this.registerEvent(this.app.vault.on('delete', function (file) {
            console.log("Detected deletion of", file);
            if (file && file.path && file.path in _this.settings.fileDirections) {
                delete _this.settings.fileDirections[file.path];
                _this.saveSettings();
                console.log("Deleted the file from the map");
            }
        }));
        this.registerEvent(this.app.vault.on('rename', function (file, oldPath) {
            console.log("Detected rename:", oldPath, "=>", file);
            if (file && file.path && oldPath in _this.settings.fileDirections) {
                _this.settings.fileDirections[file.path] = _this.settings.fileDirections[oldPath];
                delete _this.settings.fileDirections[oldPath];
                _this.saveSettings();
                console.log("Updated the map");
            }
        }));
        this.registerDomEvent(document, 'keydown', function (ev) {
            // Patch Home/End issue on RTL: https://github.com/esm7/obsidian-rtl/issues/6
            if (ev.key == 'End' || ev.key == 'Home') {
                var cmEditor = _this.getEditor();
                if (cmEditor.getOption("direction") == 'rtl') {
                    // In theory we can execute the following regardless of the editor direction, it should always work,
                    // but it's redundant and the principle in this plugin is to not interfere with Obsidian when the 
                    // direction is LTR
                    if (ev.key == 'End') {
                        cmEditor.execCommand('goLineEnd');
                    }
                    else if (ev.key == 'Home') {
                        cmEditor.execCommand('goLineStartSmart');
                    }
                }
            }
        });
    };
    RtlPlugin.prototype.onunload = function () {
        console.log('unloading RTL plugin');
    };
    RtlPlugin.prototype.adjustDirectionToCurrentFile = function () {
        if (this.currentFile && this.currentFile.path) {
            if (this.settings.rememberPerFile && this.currentFile.path in this.settings.fileDirections) {
                // If the user wants to remember the direction per file, and we have a direction set for this file -- use it
                var requiredDirection = this.settings.fileDirections[this.currentFile.path];
                console.log('Found a known direction for this file:', requiredDirection);
            }
            else {
                // Use the default direction
                var requiredDirection = this.settings.defaultDirection;
                console.log('No known direction for this file, using the default', this.settings.defaultDirection);
            }
            this.setDocumentDirection(requiredDirection);
        }
    };
    RtlPlugin.prototype.saveSettings = function () {
        var settings = this.settings.toJson();
        this.app.vault.adapter.write(this.SETTINGS_PATH, settings);
    };
    RtlPlugin.prototype.loadSettings = function () {
        var _this = this;
        console.log("Loading RTL settings");
        this.app.vault.adapter.read(this.SETTINGS_PATH).
            then(function (content) { return _this.settings.fromJson(content); }).
            catch(function (error) { console.log("RTL settings file not found"); });
    };
    RtlPlugin.prototype.getEditor = function () {
        var view = this.app.workspace.activeLeaf.view;
        if (view.getViewType() == 'markdown') {
            var markdownView = view;
            var cmEditor = markdownView.sourceMode.cmEditor;
            return cmEditor;
        }
        return null;
    };
    RtlPlugin.prototype.setDocumentDirection = function (newDirection) {
        var cmEditor = this.getEditor();
        if (cmEditor && cmEditor.getOption("direction") != newDirection) {
            this.patchAutoCloseBrackets(cmEditor, newDirection);
            cmEditor.setOption("direction", newDirection);
            cmEditor.setOption("rtlMoveVisually", true);
        }
        var view = this.app.workspace.activeLeaf.view;
        if (view && view.previewMode && view.previewMode.containerEl)
            view.previewMode.containerEl.dir = newDirection;
    };
    RtlPlugin.prototype.patchAutoCloseBrackets = function (cmEditor, newDirection) {
        // Auto-close brackets doesn't work in RTL: https://github.com/esm7/obsidian-rtl/issues/7
        // Until the actual fix is released (as part of CodeMirror), we store the value of autoCloseBrackets when
        // switching to RTL, overriding it to 'false' and restoring it when back to LTR.
        if (newDirection == 'rtl') {
            this.autoCloseBracketsValue = cmEditor.getOption('autoCloseBrackets');
            cmEditor.setOption('autoCloseBrackets', false);
        }
        else {
            cmEditor.setOption('autoCloseBrackets', this.autoCloseBracketsValue);
        }
    };
    RtlPlugin.prototype.toggleDocumentDirection = function () {
        var cmEditor = this.getEditor();
        if (cmEditor) {
            var newDirection = cmEditor.getOption("direction") == "ltr" ? "rtl" : "ltr";
            this.setDocumentDirection(newDirection);
            console.log('File', this.currentFile, 'was set to', newDirection);
            if (this.settings.rememberPerFile && this.currentFile && this.currentFile.path) {
                this.settings.fileDirections[this.currentFile.path] = newDirection;
                this.saveSettings();
            }
        }
    };
    return RtlPlugin;
}(obsidian.Plugin));
var RtlSettingsTab = /** @class */ (function (_super) {
    __extends(RtlSettingsTab, _super);
    function RtlSettingsTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        _this.settings = plugin.settings;
        return _this;
    }
    RtlSettingsTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'RTL Settings' });
        new obsidian.Setting(containerEl)
            .setName('Remember text direction per file')
            .setDesc('Store and remember the text direction used for each file individually.')
            .addToggle(function (toggle) { return toggle.setValue(_this.settings.rememberPerFile)
            .onChange(function (value) {
            _this.settings.rememberPerFile = value;
            _this.plugin.saveSettings();
            _this.plugin.adjustDirectionToCurrentFile();
        }); });
        new obsidian.Setting(containerEl)
            .setName('Default text direction')
            .setDesc('What should be the default text direction in Obsidian?')
            .addDropdown(function (dropdown) { return dropdown.addOption('ltr', 'LTR')
            .addOption('rtl', 'RTL')
            .setValue(_this.settings.defaultDirection)
            .onChange(function (value) {
            _this.settings.defaultDirection = value;
            _this.plugin.saveSettings();
            _this.plugin.adjustDirectionToCurrentFile();
        }); });
    };
    return RtlSettingsTab;
}(obsidian.PluginSettingTab));

module.exports = RtlPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
